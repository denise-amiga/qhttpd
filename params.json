{"name":"Qhttpd","tagline":"Highly Customizable HTTP server in C (small apache httpd)","body":"qHttpd\r\n======\r\n\r\n## What's qHttpd?\r\n\r\nThe goal of qHttpd Project is building a highly customizable HTTP server which can be used in many projects not only as a HTTP contents delivery purpose but also an internal protocol purpose. \r\n\r\nAre you looking for customizable HTTP server for your own software development needs? Are you considering to develop a protocol like a HTTP protocol to use as a inter-communication protol for your software? Do you want to modify standard HTTP protocol and add your own methods to fit in your needs?\r\nIf your answer is YES to one of these questions, qHttpd is just for you. Take a look. It's simple, fast and compact! \r\n\r\n## Features\r\n\r\n  * Supports **HTTP/1.1**, HTTP/1.0, HTTP/0.9 \r\n  * Supports completely working codebase for standard HTTP methods: OPTIONS, HEAD, GET, PUT(supports chunked transfer-encoding) \r\n  * Also supports **WebDAV extension**: PROPFIND, PROPPATCH, MKCOL, MOVE, DELETE, LOCK, UNLOCK \r\n  * Includes **C hooking**/customizing samples codes. \r\n  * Supports external **LUA script hooking**. \r\n  * Supports HTTP Basic Auth Module (refer http_auth.c) \r\n  * Supports Virtual Host (refer hook.c) \r\n  * You can **easily customize/add methods**. \r\n  * Supports server statistics page. \r\n  * Supports mime types. \r\n  * Supports rotating file log. \r\n\r\n## How easy adding a new method?\r\n\r\n### Sample) Adding a new method in C\r\n\r\n```\r\nint hookRequestHandler(struct HttpRequest *pReq, struct HttpResponse *pRes) {\r\n        int nResCode = 0;\r\n\r\n        // method hooking\r\n        if(!strcmp(pReq->pszRequestMethod, \"MY_METHOD\")) {\r\n                nResCode = my_method(pReq, pRes);\r\n        }\r\n        return nResCode;\r\n}\r\n\r\nint my_method(struct HttpRequest *pReq, struct HttpResponse *pRes) {\r\n        const char *txt = \"Nice to meet you~\"\r\n\r\n        httpResponseSetCode(pRes, HTTP_CODE_OK, true);\r\n        httpHeaderSetStr(pRes->pHeaders, \"MY_HEADER\", \"Hi~\");\r\n        httpResponseSetContent(pRes, \"httpd/plain\", txt, strlen(txt));\r\n}\r\n```\r\n\r\n### Sample) Modifying response using LUA script\r\n```\r\nfunction responseHandler()\r\n      local code = response:getCode();\r\n\r\n      out = assert(io.open(\"/tmp/test.log\", \"a+\"));\r\n      out:write(\"Response Code = \",code,\"\\n\");\r\n      out:write(\"\\n\");\r\n      out:close();\r\n\r\n      if (code == 200) then\r\n              response:setHeader(\"Server\", \"milk/1.0.0\");\r\n      end\r\n      return 0;\r\nend\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}